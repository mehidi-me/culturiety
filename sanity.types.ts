// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  menuItems?: Array<{
    title?: string
    link?: string
    _type: 'menuItem'
    _key: string
  }>
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  favicon?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  footer?: {
    phone?: string
    email?: string
    address?: string
    socialLinks?: Array<{
      platform?: string
      url?: string
      _type: 'socialLink'
      _key: string
    }>
    copyright?: string
  }
  seo?: SeoMetaFields
}

export type Research = {
  _id: string
  _type: 'research'
  _createdAt: string
  _updatedAt: string
  _rev: string
  backgroundVideo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    _type: 'file'
  }
  heading?: string
  booksSection?: {
    title?: string
    books?: Array<{
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      _key: string
    }>
  }
  articlesSection?: {
    title?: string
    articles?: Array<{
      title?: string
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      description?: string
      button?: string
      buttonLink?: string
      _key: string
    }>
  }
}

export type ProjectsSection = {
  _id: string
  _type: 'projectsSection'
  _createdAt: string
  _updatedAt: string
  _rev: string
  backgroundVideo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    _type: 'file'
  }
  title?: string
  projectsGrid?: {
    projects?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      title?: string
      description?: string
      link?: string
      _key: string
    }>
  }
}

export type About = {
  _id: string
  _type: 'about'
  _createdAt: string
  _updatedAt: string
  _rev: string
  backgroundVideo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    _type: 'file'
  }
  heading?: string
  subHeading?: string
  description?: string
  buttons?: {
    learnMore?: {
      label?: string
      link?: string
    }
    projects?: {
      label?: string
      link?: string
    }
  }
  aboutAdditionalSection?: {
    content?: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }>
  }
  teamSection?: {
    title?: string
    teamMembers?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      name?: string
      role?: string
      socialLinks?: Array<{
        platform?: 'Facebook' | 'LinkedIn' | 'Website'
        url?: string
        _type: 'link'
        _key: string
      }>
      _type: 'teamMember'
      _key: string
    }>
  }
  ourFocus?: {
    title?: string
    focusItems?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      title?: string
      description?: string
      link?: string
      _type: 'focusItem'
      _key: string
    }>
  }
}

export type Home = {
  _id: string
  _type: 'Home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  heroSection?: {
    backgroundVideo?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
      }
      _type: 'file'
    }
    headline?: string
    subContent?: {
      subHeading?: string
      description?: string
    }
    buttons?: {
      learnMore?: {
        label?: string
        link?: string
      }
      projects?: {
        label?: string
        link?: string
      }
    }
  }
  aiResearchSection?: {
    title?: string
    imageStack?: Array<{
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      _key: string
    }>
  }
  aiResearchCards?: {
    cards?: Array<{
      heading?: string
      description?: string
      buttonLabel?: string
      _type: 'card'
      _key: string
    }>
  }
  perilsOfSloppyScience?: {
    title?: string
    cards?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      heading?: string
      subHeading?: string
      description?: string
      _type: 'card'
      _key: string
    }>
  }
  sharingTheKnowledge?: {
    title?: string
    cards?: Array<{
      heading?: string
      description?: string
      buttonText?: string
      _type: 'card'
      _key: string
    }>
  }
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type MetaTag = {
  _type: 'metaTag'
  metaAttributes?: Array<
    {
      _key: string
    } & MetaAttribute
  >
}

export type MetaAttribute = {
  _type: 'metaAttribute'
  attributeKey?: string
  attributeType?: 'string' | 'image'
  attributeValueImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  attributeValueString?: string
}

export type SeoMetaFields = {
  _type: 'seoMetaFields'
  nofollowAttributes?: boolean
  metaTitle?: string
  metaDescription?: string
  metaImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  seoKeywords?: Array<string>
  openGraph?: OpenGraph
  additionalMetaTags?: Array<
    {
      _key: string
    } & MetaTag
  >
  twitter?: Twitter
}

export type Twitter = {
  _type: 'twitter'
  cardType?: string
  creator?: string
  site?: string
  handle?: string
}

export type OpenGraph = {
  _type: 'openGraph'
  url?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  title?: string
  description?: string
  siteName?: string
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Slug
  | Settings
  | Research
  | ProjectsSection
  | About
  | Home
  | SanityFileAsset
  | MetaTag
  | MetaAttribute
  | SeoMetaFields
  | Twitter
  | OpenGraph
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: homePageQuery
// Query: *[_type == "Home" && _id == "Home"][0]{  ...,  heroSection{    ...,    backgroundVideo{      asset->{        url      }    }  },}
export type HomePageQueryResult = {
  _id: string
  _type: 'Home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  heroSection: {
    backgroundVideo: {
      asset: {
        url: string | null
      } | null
    } | null
    headline?: string
    subContent?: {
      subHeading?: string
      description?: string
    }
    buttons?: {
      learnMore?: {
        label?: string
        link?: string
      }
      projects?: {
        label?: string
        link?: string
      }
    }
  } | null
  aiResearchSection?: {
    title?: string
    imageStack?: Array<{
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      _key: string
    }>
  }
  aiResearchCards?: {
    cards?: Array<{
      heading?: string
      description?: string
      buttonLabel?: string
      _type: 'card'
      _key: string
    }>
  }
  perilsOfSloppyScience?: {
    title?: string
    cards?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      heading?: string
      subHeading?: string
      description?: string
      _type: 'card'
      _key: string
    }>
  }
  sharingTheKnowledge?: {
    title?: string
    cards?: Array<{
      heading?: string
      description?: string
      buttonText?: string
      _type: 'card'
      _key: string
    }>
  }
} | null
// Variable: aboutPageQuery
// Query: *[_type == "about"][0]{      ...,      backgroundVideo{      asset->{        url      }    }    }
export type AboutPageQueryResult = {
  _id: string
  _type: 'about'
  _createdAt: string
  _updatedAt: string
  _rev: string
  backgroundVideo: {
    asset: {
      url: string | null
    } | null
  } | null
  heading?: string
  subHeading?: string
  description?: string
  buttons?: {
    learnMore?: {
      label?: string
      link?: string
    }
    projects?: {
      label?: string
      link?: string
    }
  }
  aboutAdditionalSection?: {
    content?: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }>
  }
  teamSection?: {
    title?: string
    teamMembers?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      name?: string
      role?: string
      socialLinks?: Array<{
        platform?: 'Facebook' | 'LinkedIn' | 'Website'
        url?: string
        _type: 'link'
        _key: string
      }>
      _type: 'teamMember'
      _key: string
    }>
  }
  ourFocus?: {
    title?: string
    focusItems?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      title?: string
      description?: string
      link?: string
      _type: 'focusItem'
      _key: string
    }>
  }
} | null
// Variable: projectsPageQuery
// Query: *[_type == "projectsSection"][0]{      ...,      backgroundVideo{      asset->{        url      }    }    }
export type ProjectsPageQueryResult = {
  _id: string
  _type: 'projectsSection'
  _createdAt: string
  _updatedAt: string
  _rev: string
  backgroundVideo: {
    asset: {
      url: string | null
    } | null
  } | null
  title?: string
  projectsGrid?: {
    projects?: Array<{
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      title?: string
      description?: string
      link?: string
      _key: string
    }>
  }
} | null
// Variable: researchPageQuery
// Query: *[_type == "research"][0]{      ...,      backgroundVideo{      asset->{        url      }    }    }
export type ResearchPageQueryResult = {
  _id: string
  _type: 'research'
  _createdAt: string
  _updatedAt: string
  _rev: string
  backgroundVideo: {
    asset: {
      url: string | null
    } | null
  } | null
  heading?: string
  booksSection?: {
    title?: string
    books?: Array<{
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      _key: string
    }>
  }
  articlesSection?: {
    title?: string
    articles?: Array<{
      title?: string
      image?: {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
      description?: string
      button?: string
      buttonLink?: string
      _key: string
    }>
  }
} | null
// Variable: pagesBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0] {    _id,    _type,    body,    overview,    title,    "slug": slug.current,  }
export type PagesBySlugQueryResult = null
// Variable: projectBySlugQuery
// Query: *[_type == "project" && slug.current == $slug][0] {    _id,    _type,    client,    coverImage,    description,    duration,    overview,    site,    "slug": slug.current,    tags,    title,  }
export type ProjectBySlugQueryResult = null
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    footer,    menuItems[],    ogImage,    menuMainButton,    adminEmail,    socialLink,    favicon,    logo,    seo{  _type,metaTitle,nofollowAttributes,seoKeywords,metaDescription,openGraph{_type,siteName,url,description,title,image{  _type,  crop{  _type,  right,  top,  left,  bottom  },  hotspot{  _type,  x,  y,  height,  width,  },  asset->{...}  }},twitter{_type,site,creator,cardType,handle},additionalMetaTags[]{_type,metaAttributes[]{_type,attributeValueString,attributeType,attributeKey,attributeValueImage{  _type,  crop{  _type,  right,  top,  left,  bottom  },  hotspot{  _type,  x,  y,  height,  width,  },  asset->{...}  }}}  }  }
export type SettingsQueryResult = {
  _id: string
  _type: 'settings'
  footer: {
    phone?: string
    email?: string
    address?: string
    socialLinks?: Array<{
      platform?: string
      url?: string
      _type: 'socialLink'
      _key: string
    }>
    copyright?: string
  } | null
  menuItems: Array<{
    title?: string
    link?: string
    _type: 'menuItem'
    _key: string
  }> | null
  ogImage: null
  menuMainButton: null
  adminEmail: null
  socialLink: null
  favicon: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  } | null
  logo: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  } | null
  seo: {
    _type: 'seoMetaFields'
    metaTitle: string | null
    nofollowAttributes: boolean | null
    seoKeywords: Array<string> | null
    metaDescription: string | null
    openGraph: {
      _type: 'openGraph'
      siteName: string | null
      url: string | null
      description: string | null
      title: string | null
      image: {
        _type: 'image'
        crop: {
          _type: 'sanity.imageCrop'
          right: number | null
          top: number | null
          left: number | null
          bottom: number | null
        } | null
        hotspot: {
          _type: 'sanity.imageHotspot'
          x: number | null
          y: number | null
          height: number | null
          width: number | null
        } | null
        asset: {
          _id: string
          _type: 'sanity.imageAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          originalFilename?: string
          label?: string
          title?: string
          description?: string
          altText?: string
          sha1hash?: string
          extension?: string
          mimeType?: string
          size?: number
          assetId?: string
          uploadId?: string
          path?: string
          url?: string
          metadata?: SanityImageMetadata
          source?: SanityAssetSourceData
        } | null
      } | null
    } | null
    twitter: {
      _type: 'twitter'
      site: string | null
      creator: string | null
      cardType: string | null
      handle: string | null
    } | null
    additionalMetaTags: Array<{
      _type: 'metaTag'
      metaAttributes: Array<{
        _type: 'metaAttribute'
        attributeValueString: string | null
        attributeType: 'image' | 'string' | null
        attributeKey: string | null
        attributeValueImage: {
          _type: 'image'
          crop: {
            _type: 'sanity.imageCrop'
            right: number | null
            top: number | null
            left: number | null
            bottom: number | null
          } | null
          hotspot: {
            _type: 'sanity.imageHotspot'
            x: number | null
            y: number | null
            height: number | null
            width: number | null
          } | null
          asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata?: SanityImageMetadata
            source?: SanityAssetSourceData
          } | null
        } | null
      }> | null
    }> | null
  } | null
} | null
// Variable: slugsByTypeQuery
// Query: *[_type == $type && defined(slug.current)]{"slug": slug.current}
export type SlugsByTypeQueryResult = Array<never>

declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "Home" && _id == "Home"][0]{\n  ...,\n  heroSection{\n    ...,\n    backgroundVideo{\n      asset->{\n        url\n      }\n    }\n  },\n}': HomePageQueryResult
    '*[_type == "about"][0]{\n\n      ...,\n      backgroundVideo{\n      asset->{\n        url\n      }\n    }\n    }': AboutPageQueryResult
    '*[_type == "projectsSection"][0]{\n\n      ...,\n      backgroundVideo{\n      asset->{\n        url\n      }\n    }\n    }': ProjectsPageQueryResult
    '*[_type == "research"][0]{\n\n      ...,\n      backgroundVideo{\n      asset->{\n        url\n      }\n    }\n    }': ResearchPageQueryResult
    '\n  *[_type == "page" && slug.current == $slug][0] {\n    _id,\n    _type,\n    body,\n    overview,\n    title,\n    "slug": slug.current,\n  }\n': PagesBySlugQueryResult
    '\n  *[_type == "project" && slug.current == $slug][0] {\n    _id,\n    _type,\n    client,\n    coverImage,\n    description,\n    duration,\n    overview,\n    site,\n    "slug": slug.current,\n    tags,\n    title,\n  }\n': ProjectBySlugQueryResult
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    footer,\n    menuItems[],\n    ogImage,\n    menuMainButton,\n    adminEmail,\n    socialLink,\n    favicon,\n    logo,\n    seo{\n  \n_type,\nmetaTitle,\nnofollowAttributes,\nseoKeywords,\nmetaDescription,\nopenGraph{\n\n_type,\nsiteName,\nurl,\ndescription,\ntitle,\nimage{\n\n  _type,\n  crop{\n  _type,\n  right,\n  top,\n  left,\n  bottom\n  },\n  hotspot{\n  _type,\n  x,\n  y,\n  height,\n  width,\n  },\n  asset->{...}\n  \n}\n\n},\ntwitter{\n\n_type,\nsite,\ncreator,\ncardType,\nhandle\n\n},\nadditionalMetaTags[]{\n_type,\nmetaAttributes[]{\n\n_type,\nattributeValueString,\nattributeType,\nattributeKey,\nattributeValueImage{\n\n  _type,\n  crop{\n  _type,\n  right,\n  top,\n  left,\n  bottom\n  },\n  hotspot{\n  _type,\n  x,\n  y,\n  height,\n  width,\n  },\n  asset->{...}\n  \n}\n\n}\n}\n\n  }\n  }\n': SettingsQueryResult
    '\n  *[_type == $type && defined(slug.current)]{"slug": slug.current}\n': SlugsByTypeQueryResult
  }
}
